# Development VPN override combining dev and VPN configurations
# Use with: docker-compose -f docker-compose.yml -f docker-compose.dev.yml -f docker-compose.dev.vpn.yml up

services:
  # OpenVPN client container
  vpn:
    image: dperson/openvpn-client
    container_name: downloadarr-vpn-dev
    cap_add:
      - net_admin
    security_opt:
      - label:disable
    dns:
      - 1.1.1.1
      - 1.0.0.1
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv6.conf.all.disable_ipv6=1
    volumes:
      - /dev/net:/dev/net:z
      - ./config.ovpn:/vpn/config.ovpn:ro
      - ./credentials.txt:/vpn/credentials.txt:ro
    environment:
      TZ: ${TZ:-UTC}
    entrypoint: ["/sbin/tini", "--", "/usr/bin/openvpn.sh"]
    # Forward Aria2 ports through VPN
    command: '-p "6800" -p "6888" -p "6888;udp" -f ""'
    ports:
      - "6800:6800"  # Aria2 RPC port through VPN
      - "6888:6888"  # Aria2 BT port through VPN
    restart: unless-stopped
    networks:
      - downloadarr
    healthcheck:
      test: |
        sh -c '
          # Check if OpenVPN process is running
          if ! pgrep openvpn > /dev/null; then
            echo "OpenVPN process not found"
            exit 1
          fi
          
          # Check if tun interface exists
          if ! ip link show tun0 > /dev/null 2>&1; then
            echo "TUN interface not found"
            exit 1
          fi
          
          echo "VPN is healthy"
          exit 0
        '
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Override API service for development with VPN
  api:
    build:
      dockerfile: packages/api/Dockerfile.dev
    container_name: downloadarr-api-dev-vpn
    environment:
      NODE_ENV: development
      VPN_ENABLED: "true"
      # Connect to Aria2 through VPN container
      ARIA2_HOST: vpn
      ARIA2_PORT: 6800
      ARIA2_SECRET: ${ARIA2_RPC_SECRET:-downloadarr}
      # Keep normal Docker networking for database/redis
      DATABASE_URL: postgresql://downloadarr:${POSTGRES_PASSWORD:-downloadarr}@postgres:5432/downloadarr
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JACKETT_URL: http://jackett:9117
      FLARESOLVERR_URL: http://flaresolverr:8191
      # External API Keys for Discovery Services
      OMDB_API_KEY: ${OMDB_API_KEY}
      TMDB_API_KEY: ${TMDB_API_KEY}
      IGDB_CLIENT_ID: ${IGDB_CLIENT_ID}
      IGDB_CLIENT_SECRET: ${IGDB_CLIENT_SECRET}
      DOWNLOAD_PATH: /app/downloads
      LIBRARY_PATH: /app/library
    volumes:
      # Inherit base volumes from docker-compose.yml
      - ${DOWNLOAD_PATH}:/app/downloads
      - ${LIBRARY_PATH}:/app/library
      - ./config:/app/config:ro
      # Add development-specific volumes
      - ./packages/api/src:/app/packages/api/src:ro
      - ./packages/api/prisma:/app/packages/api/prisma
      - vpn_ip_share:/tmp/vpn-ip:ro  # Read-only access to VPN IP data
    networks:
      - downloadarr
    depends_on:
      - vpn
      - postgres
      - redis
      - flaresolverr

  # Override Frontend for development
  frontend:
    build:
      dockerfile: packages/ui/Dockerfile.dev
    container_name: downloadarr-frontend-dev-vpn
    environment:
      DOCKER_ENV: "true"
      VITE_API_URL: http://localhost:3001
    volumes:
      # Mount source code for hot reloading
      - ./packages/ui/src:/app/packages/ui/src:ro

  # Override original Aria2 to route through VPN
  aria2:
    container_name: downloadarr-aria2-dev-vpn
    # Use VPN network mode to route all traffic through VPN
    network_mode: "service:vpn"
    ports: !reset []  # Remove direct port exposure
    networks: !reset []  # Remove from normal network
    environment:
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
      UMASK_SET: 022
      RPC_SECRET: ${ARIA2_RPC_SECRET:-downloadarr}
      RPC_PORT: 6800
      LISTEN_PORT: 6888
      DISK_CACHE: 64M
      IPV6_MODE: false
      UPDATE_TRACKERS: true
      CUSTOM_TRACKER_URL: ""
      TZ: ${TZ:-UTC}
    volumes:
      - aria2_config_dev:/config
      - ${DOWNLOAD_PATH}:/downloads
      - vpn_ip_share:/tmp/vpn-ip  # Shared volume for VPN IP
    depends_on:
      - vpn
    # Add VPN IP monitoring
    entrypoint: |
      sh -c '
        # Start Aria2 in background
        /init &
        ARIA2_PID=$$!
        
        # Function to get and write external IP
        while true; do
          echo "Checking VPN IP..."
          
          # Get external IP through VPN
          EXTERNAL_IP=$$(curl -s --max-time 10 https://api.ipify.org 2>/dev/null || curl -s --max-time 10 https://ipinfo.io/ip 2>/dev/null || echo "unknown")
          
          if [ "$$EXTERNAL_IP" != "unknown" ] && [ -n "$$EXTERNAL_IP" ]; then
            echo "$$EXTERNAL_IP" > /tmp/vpn-ip/external_ip
            echo "$$(date): $$EXTERNAL_IP" > /tmp/vpn-ip/last_update
            echo "VPN IP updated: $$EXTERNAL_IP"
          else
            echo "Failed to get VPN IP"
          fi
          
          # Update every 60 seconds
          sleep 60
        done &
        
        # Wait for Aria2 process
        wait $$ARIA2_PID
      '

  # Override AriaNG
  ariang:
    container_name: downloadarr-ariang-dev-vpn

  # Override other services with dev-vpn container names
  redis:
    container_name: downloadarr-redis-dev-vpn
    volumes:
      - redis_data_dev:/data

  postgres:
    container_name: downloadarr-postgres-dev-vpn
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data

  jackett:
    container_name: downloadarr-jackett-dev-vpn
    environment:
      PUID: ${PUID:-1000}
      PGID: ${PGID:-1000}
      TZ: ${TZ:-UTC}
      AUTO_UPDATE: true
      # FlareSolverr configuration
      JACKETT__FLARESOLVERR_URL: http://flaresolverr:8191/
      JACKETT__FLARESOLVERR_MAXTIMEOUT: 60000
    volumes:
      - jackett_config_dev:/config
      - jackett_config_dev:/jackett-config
      - ${DOWNLOAD_PATH}:/downloads

  flaresolverr:
    container_name: downloadarr-flaresolverr-dev-vpn

# Additional volumes for VPN setup
volumes:
  vpn_ip_share:  # Shared volume for VPN IP information
  redis_data_dev:
  postgres_data_dev:
  jackett_config_dev:
  aria2_config_dev:
