generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RequestedTorrent {
  id                 String             @id @default(cuid())
  contentType        ContentType
  title              String
  year               Int?
  imdbId             String?
  tmdbId             Int?
  season             Int?               // For single episode/season requests (legacy)
  episode            Int?               // For single episode requests (legacy)
  // TV Show specific fields for ongoing requests
  isOngoing          Boolean            @default(false) // True for ongoing TV show requests
  totalSeasons       Int?               // Total seasons if known (for completed shows)
  totalEpisodes      Int?               // Total episodes if known (for completed shows)
  // Game-specific fields
  igdbId             Int?               // IGDB game ID
  platform           String?            // Game platform (PC, PlayStation, etc.)
  genre              String?            // Game genre
  status             RequestStatus      @default(PENDING)
  priority           Int                @default(5)
  preferredQualities TorrentQuality[]
  preferredFormats   TorrentFormat[]
  minSeeders         Int                @default(5)
  maxSizeGB          Int                @default(20)
  blacklistedWords   String[]           @default([])
  trustedIndexers    String[]           @default([])
  searchAttempts     Int                @default(0)
  maxSearchAttempts  Int                @default(50)
  lastSearchAt       DateTime?
  nextSearchAt       DateTime?
  searchIntervalMins Int                @default(30)
  foundTorrentTitle  String?            // For legacy single torrent requests
  foundTorrentLink   String?            // For legacy single torrent requests
  foundMagnetUri     String?            // For legacy single torrent requests
  foundTorrentSize   String?            // For legacy single torrent requests
  foundSeeders       Int?               // For legacy single torrent requests
  foundIndexer       String?            // For legacy single torrent requests
  downloadJobId      String?            // For legacy single torrent requests
  aria2Gid           String?            // For legacy single torrent requests
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  completedAt        DateTime?
  expiresAt          DateTime
  userId             String?
  searchLogs         TorrentSearchLog[]
  searchResults      TorrentSearchResult[]
  // New relationships for TV show management
  tvShowSeasons      TvShowSeason[]
  torrentDownloads   TorrentDownload[]
  organizedFiles     OrganizedFile[]

  @@map("requested_torrents")
}

model TorrentSearchLog {
  id                 String           @id @default(cuid())
  requestedTorrentId String
  searchQuery        String
  indexersSearched   String[]
  resultsFound       Int
  bestResultTitle    String?
  bestResultSeeders  Int?
  searchDurationMs   Int
  searchedAt         DateTime         @default(now())
  requestedTorrent   RequestedTorrent @relation(fields: [requestedTorrentId], references: [id], onDelete: Cascade)

  @@map("torrent_search_logs")
}

model TorrentSearchResult {
  id                 String           @id @default(cuid())
  requestedTorrentId String
  title              String
  link               String?
  magnetUri          String?
  size               String
  sizeBytes          BigInt?
  seeders            Int
  leechers           Int
  category           String
  indexer            String
  publishDate        String
  quality            String?
  format             String?
  rankingScore       Float            @default(0)
  isSelected         Boolean          @default(false)
  isAutoSelected     Boolean          @default(false)
  createdAt          DateTime         @default(now())
  requestedTorrent   RequestedTorrent @relation(fields: [requestedTorrentId], references: [id], onDelete: Cascade)

  @@map("torrent_search_results")
}

model TvShowSeason {
  id                 String           @id @default(cuid())
  requestedTorrentId String
  seasonNumber       Int
  totalEpisodes      Int?             // Total episodes in this season if known
  status             SeasonStatus     @default(PENDING)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  requestedTorrent   RequestedTorrent @relation(fields: [requestedTorrentId], references: [id], onDelete: Cascade)
  episodes           TvShowEpisode[]
  torrentDownloads   TorrentDownload[]

  @@unique([requestedTorrentId, seasonNumber])
  @@map("tv_show_seasons")
}

model TvShowEpisode {
  id               String           @id @default(cuid())
  tvShowSeasonId   String
  episodeNumber    Int
  title            String?          // Episode title if known
  airDate          DateTime?        // Episode air date if known
  status           EpisodeStatus    @default(PENDING)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  tvShowSeason     TvShowSeason     @relation(fields: [tvShowSeasonId], references: [id], onDelete: Cascade)
  torrentDownloads TorrentDownload[]

  @@unique([tvShowSeasonId, episodeNumber])
  @@map("tv_show_episodes")
}

model TorrentDownload {
  id                 String            @id @default(cuid())
  requestedTorrentId String
  tvShowSeasonId     String?           // For season pack downloads
  tvShowEpisodeId    String?           // For individual episode downloads
  torrentTitle       String
  torrentLink        String?
  magnetUri          String?
  torrentSize        String?
  seeders            Int?
  indexer            String?
  downloadJobId      String?
  aria2Gid           String?
  status             TorrentDownloadStatus @default(PENDING)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  completedAt        DateTime?
  // Removed downloadProgress, downloadSpeed, downloadEta - now fetched live from aria2
  requestedTorrent   RequestedTorrent  @relation(fields: [requestedTorrentId], references: [id], onDelete: Cascade)
  tvShowSeason       TvShowSeason?     @relation(fields: [tvShowSeasonId], references: [id], onDelete: Cascade)
  tvShowEpisode      TvShowEpisode?    @relation(fields: [tvShowEpisodeId], references: [id], onDelete: Cascade)

  @@map("torrent_downloads")
}

model DownloadMetadata {
  id             String            @id @default(cuid())
  name           String
  originalUrl    String
  type           DownloadType
  mediaType      MediaType?
  mediaTitle     String?
  mediaYear      Int?
  mediaPoster    String?
  mediaOverview  String?
  aria2Gid       String            @unique
  aria2ChildGids String[]          @default([])
  status         DownloadStatus    @default(ACTIVE)
  destination    String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@map("download_metadata")
}

enum DownloadType {
  MAGNET
  TORRENT
  HTTP
  HTTPS
}

enum MediaType {
  MOVIE
  TV
  GAME
}

enum DownloadStatus {
  ACTIVE
  WAITING
  PAUSED
  ERROR
  COMPLETE
  REMOVED
}

enum ContentType {
  MOVIE
  TV_SHOW
  GAME
}

enum RequestStatus {
  PENDING
  SEARCHING
  FOUND
  DOWNLOADING
  COMPLETED
  FAILED
  CANCELLED
  EXPIRED
}

enum TorrentQuality {
  SD
  HD_720P
  HD_1080P
  UHD_4K
  UHD_8K
}

enum TorrentFormat {
  X264
  X265
  XVID
  DIVX
  AV1
  HEVC
}

enum SeasonStatus {
  PENDING
  SEARCHING
  FOUND
  DOWNLOADING
  COMPLETED
  FAILED
}

enum EpisodeStatus {
  PENDING
  SEARCHING
  FOUND
  DOWNLOADING
  COMPLETED
  FAILED
}

enum TorrentDownloadStatus {
  PENDING
  DOWNLOADING
  COMPLETED
  FAILED
  CANCELLED
}

model OrganizationRule {
  id                String      @id @default(cuid())
  contentType       ContentType
  isDefault         Boolean     @default(false)
  isActive          Boolean     @default(true)

  // Folder naming rules
  folderNamePattern String      // e.g., "{title} ({year})"

  // File naming rules
  fileNamePattern   String      // e.g., "{title} ({year}) - {edition} - {quality} - {format}"

  // Season folder rules (TV shows only)
  seasonFolderPattern String?   // e.g., "Season {seasonNumber}"

  // Path configuration
  basePath          String?     // Override for LIBRARY_PATH

  // Platform-specific rules (for games)
  platform          String?     // Platform name for game-specific rules

  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@unique([contentType, isDefault])
  @@map("organization_rules")
}

model OrganizationSettings {
  id                    String   @id @default(cuid())

  // Base library paths
  libraryPath           String   @default("/library")
  moviesPath            String?  // Override for movies
  tvShowsPath           String?  // Override for TV shows
  gamesPath             String?  // Override for games

  // Organization behavior
  organizeOnComplete    Boolean  @default(true)
  replaceExistingFiles  Boolean  @default(true)
  extractArchives       Boolean  @default(true)
  deleteAfterExtraction Boolean  @default(true)

  // Reverse indexing
  enableReverseIndexing Boolean  @default(true)
  reverseIndexingCron   String   @default("0 * * * *") // Every hour

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("organization_settings")
}

model OrganizedFile {
  id                String      @id @default(cuid())

  // File information
  originalPath      String
  organizedPath     String
  fileName          String
  fileSize          BigInt?

  // Content metadata
  contentType       ContentType
  title             String
  year              Int?
  season            Int?        // For TV shows
  episode           Int?        // For TV shows
  platform          String?     // For games

  // Quality information
  quality           String?
  format            String?
  edition           String?

  // Organization tracking
  organizedAt       DateTime    @default(now())
  isReverseIndexed  Boolean     @default(false) // True if found via reverse indexing

  // Relationships
  requestedTorrentId String?
  requestedTorrent   RequestedTorrent? @relation(fields: [requestedTorrentId], references: [id], onDelete: SetNull)

  @@map("organized_files")
}

model AppConfiguration {
  id                    String   @id @default(cuid())

  // Onboarding status
  onboardingCompleted   Boolean  @default(false)
  onboardingCompletedAt DateTime?

  // Jackett configuration
  jackettApiKey         String?
  jackettUrl            String   @default("http://jackett:9117")

  // Organization preferences
  organizationEnabled   Boolean  @default(true)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("app_configuration")
}
