FROM node:20-alpine

# Install system dependencies for VPN, downloading, and Docker
RUN apk add --no-cache \
    openvpn \
    curl \
    wget \
    aria2 \
    docker-cli \
    shadow \
    netcat-openbsd

WORKDIR /app

# Copy package files for dependency installation
COPY package.json ./
COPY packages/api/package.json ./packages/api/

# Verify package.json files are valid and show their content for debugging
RUN echo "=== Verifying package.json files ===" && \
    echo "Root package.json size: $(wc -c < ./package.json) bytes" && \
    echo "API package.json size: $(wc -c < ./packages/api/package.json) bytes" && \
    node -e "JSON.parse(require('fs').readFileSync('./package.json', 'utf8')); console.log('✓ Root package.json is valid');" && \
    node -e "JSON.parse(require('fs').readFileSync('./packages/api/package.json', 'utf8')); console.log('✓ API package.json is valid');" && \
    echo "=== Package.json verification complete ==="

# Install all dependencies (including dev dependencies for development)
RUN npm install && npm cache clean --force

# Copy the API source code
COPY packages/api ./packages/api

# Copy startup script
COPY packages/api/scripts/start.sh /start.sh
RUN chmod +x /start.sh

# Create directories
RUN mkdir -p /downloads /app/vpn

# Set permissions and Docker access
RUN chown -R node:node /app /downloads

# Add node user to docker group for Docker socket access
RUN addgroup -g 999 docker || true
RUN adduser node docker || true

USER node

WORKDIR /app/packages/api

EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3001/ || exit 1

# Use development command with hot reloading and migrations
CMD ["/start.sh", "npm", "run", "dev"]
